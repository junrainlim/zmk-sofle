#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1600  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;        // 1
            time-to-max-speed-ms = <200>;       // 0
            delay-ms = <0>;                     // 0
        };

        msc {
            acceleration-exponent = <1>;        // 0
            time-to-max-speed-ms = <300>;       // 500
            delay-ms = <0>;                     // 10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1  &kp N2      &kp N3      &kp N4      &kp N5              &kp UP                  &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp LBKT
&kp TAB     &kp Q   &kp W       &kp E       &kp R       &kp T               &kp DOWN                &kp Y       &kp U       &kp I       &kp O       &kp P       &kp RBKT
&kp BSPC    &kp A   &kp S       &kp D       &kp F       &kp G               &kp LEFT                &kp H       &kp J       &kp K       &kp L       &kp SEMI    &kp APOS
&kp LSHFT   &kp Z   &kp X       &kp C       &kp V       &kp B               &kp RIGHT               &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &kp RSHIFT
&kp C_MUTE          &kp LGUI    &kp LCTRL   &kp LALT    &kp SPACE   &mo 1   &mo 2       &kp RALT    &kp ENTER   &kp RCTRL   &kp MINUS   &kp EQUAL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1      &kp F2  &kp F3  &kp F4     &kp F5           &mmv MOVE_UP            &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &kp F11
&kp BSLH    &kp UP      &trans  &trans  &kp DOWN   &kp F10          &mmv MOVE_DOWN          &msc SCRL_UP    &trans          &mmv MOVE_UP    &trans          &trans          &trans
&kp DELETE  &kp LEFT    &trans  &trans  &kp RIGHT  &kp F11          &mmv MOVE_LEFT          &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT &ctrl_alt_tab   &trans
&trans      &kp HOME    &trans  &trans  &kp END    &kp F12          &mmv MOVE_RIGHT         &rgb_ug RGB_BRI &rgb_ug RGB_BRD &kp INSERT      &trans          &trans          &bootloader
&trans                  &trans  &trans  &trans     &trans   &trans  &mkp LCLK       &trans  &mkp LCLK       &mkp RCLK       &mkp MCLK       &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&trans      &trans      &trans      &trans      &trans       &trans                             &trans                 &trans  &trans  &trans      &trans     &trans       &trans
&trans      &trans      &trans      &trans      &trans       &trans                             &mmv MOVE_DOWN         &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans      &trans      &trans      &trans      &trans       &trans                             &mmv MOVE_LEFT         &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans      &rgb_ug RGB_OFF &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI   &mmv MOVE_RIGHT        &trans  &trans  &sys_reset  &soft_off  &bootloader  &bootloader
&trans      &trans      &trans      &trans      &trans       &trans                             &mkp LCLK       &trans &trans  &trans  &trans       &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};

/ {
    macros {
        ctrl_alt_tab: ctrl_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_press &kp LALT>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LALT>
                , <&macro_release &kp LCTRL>
                ;
        };
    };
};